// ---------------------------------------------------------------------------
//
// you have to change these three functions to create the shapefiles you want.
//
// this default implementation creates stuff that roughly equals the shape 
// files on download.geofabrik.de.
//
// ---------------------------------------------------------------------------

void setup_shapefiles()
{
    // set up your shapefiles. for each of the files you want to create,
    // make one call to shapefile_new, with the following parameters:
    //
    // shapefile_new(id, type, basename, num_attrs, ...)
    //
    // where:
    //
    // id -        the number of the file. start with 0 and count upwards.
    // type -      put SHPT_POINT for point files, SHPT_ARC for line files, 
    //             and SHPT_POLYGON for areas.
    // basename -  the file name; extensions .dbf/.shp/.shx will be added.
    // num_attrs - how many attributes you want in the dbf file.
    //
    // for each attribute you will then have to specify the following:
    //
    // a name -    for the name of the column in the .dbf file;
    // a type -    put FTString for strings, FTInteger for integers, and
    //             FTDouble for doubles;
    // a length -  how many characters or digits the value  may have, and
    // decimals -  only for FTDouble, the number of decimals.
    
    shapefile_new(0, SHPT_POLYGON, "buildings", 3, 
        "osm_id", FTInteger, 11, 
        "name", FTString, 48, 
        "type", FTString, 16);

    shapefile_new(1, SHPT_ARC, "waterways", 4, 
        "osm_id", FTInteger, 11, 
        "name", FTString, 48, 
        "type", FTString, 16, 
        "width", FTInteger, 3);

    shapefile_new(2, SHPT_ARC, "roads", 7, 
        "osm_id", FTInteger, 11, 
        "name", FTString, 48, 
        "ref", FTString, 16, 
        "type", FTString, 16, 
        "oneway", FTInteger, 1, 
        "bridge", FTInteger, 1, 
        "maxspeed", FTInteger, 3);

    shapefile_new(3, SHPT_ARC, "railways", 3, 
        "osm_id", FTInteger, 11, 
        "name", FTString, 48, 
        "type", FTString, 16);

    shapefile_new(4, SHPT_POINT, "points", 4, 
        "osm_id", FTInteger, 11, 
        "timestamp", FTString, 20, 
        "name", FTString, 48, 
        "type", FTString, 16);

    shapefile_new(5, SHPT_POINT, "places", 4, 
        "osm_id", FTInteger, 11, 
        "name", FTString, 48, 
        "type", FTString, 16, 
        "population", FTInteger, 9);

    shapefile_new(6, SHPT_POLYGON, "natural", 3, 
        "osm_id", FTInteger, 11, 
        "name", FTString, 48, 
        "type", FTString, 16);

}

/**
 * Called when a node has been fully read.
 */
void process_osm_node() 
{
    // this is executed whenever a node has been fully read. 
    //
    // You will find its ID in current_id and its tags in the g_hash_table 
    // current_tags, its lat/lon in the global current_latlon array.
    //
    // Determine whether you want the way added to one of your shapefiles, 
    // and if yes, call
    //
    // shapefile_add_node(id, ...)
    //
    // where "id" is the number of the file you have used during setup,
    // and "..." is the list of attributes, which must match number and
    // type as specified during setup.

    if (g_hash_table_lookup(current_tags, "place"))
    {
        const char *pop = g_hash_table_lookup(current_tags, "population");
        shapefile_add_node(5, 
            current_id, 
            g_hash_table_lookup(current_tags, "name"),
            g_hash_table_lookup(current_tags, "place"),
            pop ? atoi(pop) : 0);
    }
    else
    {
        const char *type = g_hash_table_lookup(current_tags, "amenity");
        if (!type) type = g_hash_table_lookup(current_tags, "tourism");
        if (!type) type = g_hash_table_lookup(current_tags, "historic");
        if (!type) type = g_hash_table_lookup(current_tags, "man_made");
        if (!type) type = g_hash_table_lookup(current_tags, "railway");
        if (!type) type = g_hash_table_lookup(current_tags, "highway");
        if (type)
        {
            shapefile_add_node(4, 
                current_id, 
                current_timestamp,
                g_hash_table_lookup(current_tags, "name"),
                type);
        }
    }
};

/**
 * Called when a way has been fully read.
 * You will find its ID in current_id and its tags in the g_hash_table 
 * current_tags. 
 */
void process_osm_way() 
{
    // this is executed whenever a way is fully read. 
    //
    // You will find its ID in current_id and its tags in the g_hash_table 
    // current_tags. 
    //
    // Determine whether you want the way added to one of your shapefiles, 
    // and if yes, call
    //
    // shapefile_add_way(id, ...)
    //
    // where "id" is the number of the file you have used during setup,
    // and "..." is the list of attributes, which must match number and
    // type as specified during setup.
    
    const char *value = g_hash_table_lookup(current_tags, "highway");
    if (value)
    {
        const char *oneway = g_hash_table_lookup(current_tags, "oneway");
        int ow = 0;
        if (oneway)
        {
            if (strcmp(oneway, "false") && strcmp(oneway, "no") && strcmp(oneway, "0"))
            {
                ow = 1;
            }
        }
        const char *bridge = g_hash_table_lookup(current_tags, "bridge");
        int br = 0;
        if (bridge)
        {
            if (strcmp(bridge, "false") && strcmp(bridge, "no") && strcmp(bridge, "0"))
            {
                br = 1;
            }
        }
        const char *maxspeed = g_hash_table_lookup(current_tags, "maxspeed");

        shapefile_add_way(2, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            g_hash_table_lookup(current_tags, "ref"),
            value,
            ow,
            br,
            maxspeed ? atoi(maxspeed) : 0);
        return;
    }

    value = g_hash_table_lookup(current_tags, "building");
    if (value)
    {
        const char *type = strcmp(value, "yes") ? value : 0;
        if (!type) type = g_hash_table_lookup(current_tags, "amenity");
        if (!type) type = g_hash_table_lookup(current_tags, "tourism");
        if (!type) type = g_hash_table_lookup(current_tags, "historic");
        if (!type) type = g_hash_table_lookup(current_tags, "man_made");
        if (!type) type = g_hash_table_lookup(current_tags, "railway");
        if (!type) type = g_hash_table_lookup(current_tags, "highway");

        shapefile_add_polygon(0, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            type);
        return;
    }

    value = g_hash_table_lookup(current_tags, "railway");
    if (value)
    {
        shapefile_add_way(3, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            value);
        return;
    }

    value = g_hash_table_lookup(current_tags, "waterway");
    if (value && strcmp(value, "riverbank"))
    {
        const char *width = g_hash_table_lookup(current_tags, "width");
        shapefile_add_way(1, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            value, 
            width ? atoi(width) : 0);
        return;
    }

    if (value)
    {
        shapefile_add_polygon(6, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            "riverbank");
        return;
    }

    const char *natural = g_hash_table_lookup(current_tags, "natural");
    const char *landuse = g_hash_table_lookup(current_tags, "landuse");
    const char *leisure = g_hash_table_lookup(current_tags, "leisure");

    if ((landuse && !strcmp(landuse, "forest")) || (natural && !strcmp(natural, "wood")))
    {
        shapefile_add_polygon(6, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            "forest");
        return;
    }
    if (leisure && !strcmp(leisure, "park")) 
    {
        shapefile_add_polygon(6, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            "park");
        return;
    }
    if (natural && !strcmp(natural, "water")) 
    {
        shapefile_add_polygon(6, 
            current_id,
            g_hash_table_lookup(current_tags, "name"),
            "water");
        return;
    }

};

// ---------------------------------------------------------------------------
//
// no maintenance required in the parts below.
//
// ---------------------------------------------------------------------------
